{"ast":null,"code":"import { __assign } from '../_virtual/_tslib.js';\nimport * as React from 'react';\nimport { AuthContextConsumer } from '../AuthContext.js';\nimport { doSignIn } from '../utils/reducers.js';\nimport { AuthKitError } from '../errors.js';\n\n/**\n * @public\n * @function\n * @name withSignIn\n * @description Inject sign in functionality inside the Component's Prop\n * @param Component\n */\nfunction withSignIn(Component) {\n  return function (props) {\n    return React.createElement(AuthContextConsumer, null, function (c) {\n      if (c === null) {\n        throw new AuthKitError('Auth Provider is missing. ' + 'Please add the AuthProvider before Router');\n      }\n      var signIn = function signIn(signInConfig) {\n        var token = signInConfig.token,\n          tokenType = signInConfig.tokenType,\n          authState = signInConfig.authState,\n          expiresIn = signInConfig.expiresIn,\n          refreshToken = signInConfig.refreshToken,\n          refreshTokenExpireIn = signInConfig.refreshTokenExpireIn;\n        var expTime = new Date(new Date().getTime() + expiresIn * 60 * 1000);\n        if (c.authState.isUsingRefreshToken) {\n          // Using the power of refresh token\n          if (!!refreshToken && !!refreshTokenExpireIn) {\n            // refresh token params are provided\n            // sign in with refresh token\n            var refreshTokenExpireAt = new Date(new Date().getTime() + refreshTokenExpireIn * 60 * 1000);\n            c.dispatch(doSignIn({\n              auth: {\n                token: token,\n                type: tokenType,\n                expiresAt: expTime\n              },\n              userState: authState ? authState : null,\n              refresh: {\n                token: refreshToken,\n                expiresAt: refreshTokenExpireAt\n              }\n            }));\n            return true;\n          } else {\n            // refresh token params are not provided\n            // throw an error\n            throw new AuthKitError('Make sure you given \"refreshToken\"' + ' and \"refreshTokenExpireIn\" parameter');\n          }\n        } else {\n          // Not using refresh token\n          if (!!refreshToken && !!refreshTokenExpireIn) {\n            // params are not expected but provided\n            // throw an error\n            throw new AuthKitError('The app doesn\\'t implement ' + '\\'refreshToken\\' feature.\\n So you have to' + ' implement refresh token feature' + ' from \\'AuthProvider\\' before using it.');\n          } else {\n            // sign in without the refresh token\n            c.dispatch(doSignIn({\n              auth: {\n                token: token,\n                type: tokenType,\n                expiresAt: expTime\n              },\n              userState: authState ? authState : null,\n              refresh: null\n            }));\n            return true;\n          }\n        }\n      };\n      return React.createElement(Component, __assign({}, props, {\n        signIn: signIn\n      }));\n    });\n  };\n}\nexport { withSignIn as default };","map":null,"metadata":{},"sourceType":"module"}