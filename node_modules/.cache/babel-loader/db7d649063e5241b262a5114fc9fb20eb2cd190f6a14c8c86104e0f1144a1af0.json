{"ast":null,"code":"import React, { Children, isValidElement } from 'react';\n\n// `Component`. If `props` is passed, those will be added as props on the\n// wrapped component. If `element` is null, the component is not wrapped.\n\nfunction wrapWithComponent(element, Component, props) {\n  if (element == null) {\n    return null;\n  }\n  return isElementOfType(element, Component) ? element : /*#__PURE__*/React.createElement(Component, props, element);\n} // In development, we compare based on the name of the function because\n// React Hot Loader proxies React components in order to make updates. In\n// production we can simply compare the components for equality.\n\nconst isComponent = process.env.NODE_ENV === 'development' ? hotReloadComponentCheck : (AComponent, AnotherComponent) => AComponent === AnotherComponent; // Checks whether `element` is a React element of type `Component` (or one of\n// the passed components, if `Component` is an array of React components).\n\nfunction isElementOfType(element, Component) {\n  var _element$props;\n  if (element == null || ! /*#__PURE__*/isValidElement(element) || typeof element.type === 'string') {\n    return false;\n  }\n  const {\n    type: defaultType\n  } = element; // Type override allows components to bypass default wrapping behavior. Ex: Stack, ResourceList...\n  // See https://github.com/Shopify/app-extension-libs/issues/996#issuecomment-710437088\n\n  const overrideType = (_element$props = element.props) === null || _element$props === void 0 ? void 0 : _element$props.__type__;\n  const type = overrideType || defaultType;\n  const Components = Array.isArray(Component) ? Component : [Component];\n  return Components.some(AComponent => typeof type !== 'string' && isComponent(AComponent, type));\n} // Returns all children that are valid elements as an array. Can optionally be\n// filtered by passing `predicate`.\n\nfunction elementChildren(children) {\n  let predicate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => true;\n  return Children.toArray(children).filter(child => /*#__PURE__*/isValidElement(child) && predicate(child));\n}\nfunction ConditionalWrapper(_ref) {\n  let {\n    condition,\n    wrapper,\n    children\n  } = _ref;\n  return condition ? wrapper(children) : children;\n}\nfunction ConditionalRender(_ref2) {\n  let {\n    condition,\n    children\n  } = _ref2;\n  return condition ? children : null;\n}\nfunction hotReloadComponentCheck(AComponent, AnotherComponent) {\n  const componentName = AComponent.name;\n  const anotherComponentName = AnotherComponent.displayName;\n  return AComponent === AnotherComponent || Boolean(componentName) && componentName === anotherComponentName;\n}\nexport { ConditionalRender, ConditionalWrapper, elementChildren, isElementOfType, wrapWithComponent };","map":{"version":3,"names":["React","Children","isValidElement","wrapWithComponent","element","Component","props","isElementOfType","createElement","isComponent","process","env","NODE_ENV","hotReloadComponentCheck","AComponent","AnotherComponent","_element$props","type","defaultType","overrideType","__type__","Components","Array","isArray","some","elementChildren","children","predicate","arguments","length","undefined","toArray","filter","child","ConditionalWrapper","_ref","condition","wrapper","ConditionalRender","_ref2","componentName","name","anotherComponentName","displayName","Boolean"],"sources":["/Users/jonaslemueldatu/node_modules/@shopify/polaris/build/esm/utilities/components.js"],"sourcesContent":["import React, { Children, isValidElement } from 'react';\n\n// `Component`. If `props` is passed, those will be added as props on the\n// wrapped component. If `element` is null, the component is not wrapped.\n\nfunction wrapWithComponent(element, Component, props) {\n  if (element == null) {\n    return null;\n  }\n\n  return isElementOfType(element, Component) ? element : /*#__PURE__*/React.createElement(Component, props, element);\n} // In development, we compare based on the name of the function because\n// React Hot Loader proxies React components in order to make updates. In\n// production we can simply compare the components for equality.\n\nconst isComponent = process.env.NODE_ENV === 'development' ? hotReloadComponentCheck : (AComponent, AnotherComponent) => AComponent === AnotherComponent; // Checks whether `element` is a React element of type `Component` (or one of\n// the passed components, if `Component` is an array of React components).\n\nfunction isElementOfType(element, Component) {\n  var _element$props;\n\n  if (element == null || ! /*#__PURE__*/isValidElement(element) || typeof element.type === 'string') {\n    return false;\n  }\n\n  const {\n    type: defaultType\n  } = element; // Type override allows components to bypass default wrapping behavior. Ex: Stack, ResourceList...\n  // See https://github.com/Shopify/app-extension-libs/issues/996#issuecomment-710437088\n\n  const overrideType = (_element$props = element.props) === null || _element$props === void 0 ? void 0 : _element$props.__type__;\n  const type = overrideType || defaultType;\n  const Components = Array.isArray(Component) ? Component : [Component];\n  return Components.some(AComponent => typeof type !== 'string' && isComponent(AComponent, type));\n} // Returns all children that are valid elements as an array. Can optionally be\n// filtered by passing `predicate`.\n\nfunction elementChildren(children, predicate = () => true) {\n  return Children.toArray(children).filter(child => /*#__PURE__*/isValidElement(child) && predicate(child));\n}\nfunction ConditionalWrapper({\n  condition,\n  wrapper,\n  children\n}) {\n  return condition ? wrapper(children) : children;\n}\nfunction ConditionalRender({\n  condition,\n  children\n}) {\n  return condition ? children : null;\n}\n\nfunction hotReloadComponentCheck(AComponent, AnotherComponent) {\n  const componentName = AComponent.name;\n  const anotherComponentName = AnotherComponent.displayName;\n  return AComponent === AnotherComponent || Boolean(componentName) && componentName === anotherComponentName;\n}\n\nexport { ConditionalRender, ConditionalWrapper, elementChildren, isElementOfType, wrapWithComponent };\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,cAAc,QAAQ,OAAO;;AAEvD;AACA;;AAEA,SAASC,iBAAiBA,CAACC,OAAO,EAAEC,SAAS,EAAEC,KAAK,EAAE;EACpD,IAAIF,OAAO,IAAI,IAAI,EAAE;IACnB,OAAO,IAAI;EACb;EAEA,OAAOG,eAAe,CAACH,OAAO,EAAEC,SAAS,CAAC,GAAGD,OAAO,GAAG,aAAaJ,KAAK,CAACQ,aAAa,CAACH,SAAS,EAAEC,KAAK,EAAEF,OAAO,CAAC;AACpH,CAAC,CAAC;AACF;AACA;;AAEA,MAAMK,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,GAAGC,uBAAuB,GAAG,CAACC,UAAU,EAAEC,gBAAgB,KAAKD,UAAU,KAAKC,gBAAgB,CAAC,CAAC;AAC1J;;AAEA,SAASR,eAAeA,CAACH,OAAO,EAAEC,SAAS,EAAE;EAC3C,IAAIW,cAAc;EAElB,IAAIZ,OAAO,IAAI,IAAI,IAAI,EAAE,aAAaF,cAAc,CAACE,OAAO,CAAC,IAAI,OAAOA,OAAO,CAACa,IAAI,KAAK,QAAQ,EAAE;IACjG,OAAO,KAAK;EACd;EAEA,MAAM;IACJA,IAAI,EAAEC;EACR,CAAC,GAAGd,OAAO,CAAC,CAAC;EACb;;EAEA,MAAMe,YAAY,GAAG,CAACH,cAAc,GAAGZ,OAAO,CAACE,KAAK,MAAM,IAAI,IAAIU,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACI,QAAQ;EAC9H,MAAMH,IAAI,GAAGE,YAAY,IAAID,WAAW;EACxC,MAAMG,UAAU,GAAGC,KAAK,CAACC,OAAO,CAAClB,SAAS,CAAC,GAAGA,SAAS,GAAG,CAACA,SAAS,CAAC;EACrE,OAAOgB,UAAU,CAACG,IAAI,CAACV,UAAU,IAAI,OAAOG,IAAI,KAAK,QAAQ,IAAIR,WAAW,CAACK,UAAU,EAAEG,IAAI,CAAC,CAAC;AACjG,CAAC,CAAC;AACF;;AAEA,SAASQ,eAAeA,CAACC,QAAQ,EAA0B;EAAA,IAAxBC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,MAAM,IAAI;EACvD,OAAO3B,QAAQ,CAAC8B,OAAO,CAACL,QAAQ,CAAC,CAACM,MAAM,CAACC,KAAK,IAAI,aAAa/B,cAAc,CAAC+B,KAAK,CAAC,IAAIN,SAAS,CAACM,KAAK,CAAC,CAAC;AAC3G;AACA,SAASC,kBAAkBA,CAAAC,IAAA,EAIxB;EAAA,IAJyB;IAC1BC,SAAS;IACTC,OAAO;IACPX;EACF,CAAC,GAAAS,IAAA;EACC,OAAOC,SAAS,GAAGC,OAAO,CAACX,QAAQ,CAAC,GAAGA,QAAQ;AACjD;AACA,SAASY,iBAAiBA,CAAAC,KAAA,EAGvB;EAAA,IAHwB;IACzBH,SAAS;IACTV;EACF,CAAC,GAAAa,KAAA;EACC,OAAOH,SAAS,GAAGV,QAAQ,GAAG,IAAI;AACpC;AAEA,SAASb,uBAAuBA,CAACC,UAAU,EAAEC,gBAAgB,EAAE;EAC7D,MAAMyB,aAAa,GAAG1B,UAAU,CAAC2B,IAAI;EACrC,MAAMC,oBAAoB,GAAG3B,gBAAgB,CAAC4B,WAAW;EACzD,OAAO7B,UAAU,KAAKC,gBAAgB,IAAI6B,OAAO,CAACJ,aAAa,CAAC,IAAIA,aAAa,KAAKE,oBAAoB;AAC5G;AAEA,SAASJ,iBAAiB,EAAEJ,kBAAkB,EAAET,eAAe,EAAElB,eAAe,EAAEJ,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}