{"ast":null,"code":"import { __assign } from './_virtual/_tslib.js';\nimport Cookies from 'js-cookie';\n\n/**\n * @class TokenObject\n *\n * Stores and retrieve Token\n */\nvar TokenObject = /** @class */function () {\n  /**\n   * TokenObject - Stores, retrieve and process tokens\n   *\n   * @param authStorageName - Name of the Token,\n   * which will store the Authorization Token\n   *\n   * @param authStorageType - Type of the auth Storage, `\n   * cookie` or `localstorage`\n   *\n   * @param refreshTokenName - Name of the refresh Token,\n   * if `undefined`, then no refreshToken feature is using\n   *\n   * @param cookieDomain - domain name for the Cookies,\n   * only applicable when `authStorageType` is `cookie`\n   *\n   * @param cookieSecure - cookies are secure or not,\n   * only applicable when `authStorageType` is `cookie`\n   *\n   * @constructor\n   */\n  function TokenObject(authStorageName, authStorageType, refreshTokenName, cookieDomain, cookieSecure) {\n    this.authStorageType = authStorageType;\n    this.authStorageName = authStorageName;\n    this.authTimeStorageName = \"\".concat(authStorageName, \"_storage\");\n    this.stateStorageName = \"\".concat(authStorageName, \"_state\");\n    this.refreshTokenName = refreshTokenName;\n    this.cookieDomain = cookieDomain;\n    this.cookieSecure = cookieSecure;\n    this.authStorageTypeName = \"\".concat(this.authStorageName, \"_type\");\n    this.isUsingRefreshToken = !!this.refreshTokenName;\n    this.refreshTokenTimeName = this.refreshTokenName ? \"\".concat(this.refreshTokenName, \"_time\") : null;\n  }\n  /**\n   * Get the Initial Tokens and states\n   * Called externally in `AuthProvider`\n   * when the Application is bootstrapping or refreshed\n   *\n   * If the `authStorageType` is `cookie`,\n   * get information from `initialCookieToken()` function\n   *\n   * If the `authTokenType` is `localStorage`\n   * get information from `initialLSToken()` function\n   *\n   * @returns AuthKitStateInterface\n   */\n  TokenObject.prototype.initialToken = function () {\n    if (this.authStorageType === 'cookie') {\n      return this.initialCookieToken_();\n    } else {\n      return this.initialLSToken_();\n    }\n  };\n  /**\n   * Get the Initial Token from Cookies\n   * Called internally by `initialToken` method\n   *\n   * If the `authStorageType` is `cookie`\n   * then this function is called\n   * And returns the Tokens and states Stored in all 4 cookies\n   *\n   * @returns AuthKitStateInterface\n   */\n  TokenObject.prototype.initialCookieToken_ = function () {\n    var authToken = Cookies.get(this.authStorageName);\n    var authTokenType = Cookies.get(this.authStorageTypeName);\n    var authTokenTime = Cookies.get(this.authTimeStorageName);\n    var stateCookie = Cookies.get(this.stateStorageName);\n    var refreshToken = this.isUsingRefreshToken && this.refreshTokenName != null ? Cookies.get(this.refreshTokenName) : null;\n    var refreshTokenTime = this.isUsingRefreshToken && this.refreshTokenTimeName != null ? Cookies.get(this.refreshTokenTimeName) : null;\n    return this.checkTokenExist(authToken, authTokenType, authTokenTime, stateCookie, refreshToken, refreshTokenTime);\n  };\n  /**\n   * Get the Initial Token from LocalStorage\n   * Called internally by `initialToken` method\n   *\n   * If the `authStorageType` is `localstorage`\n   * then this function is called\n   * And returns the Tokens and states Stored in all 4 cookies\n   *\n   * @returns AuthKitStateInterface\n   */\n  TokenObject.prototype.initialLSToken_ = function () {\n    var authToken = localStorage.getItem(this.authStorageName);\n    var authTokenType = localStorage.getItem(this.authStorageTypeName);\n    var authTokenTime = localStorage.getItem(this.authTimeStorageName);\n    var stateCookie = localStorage.getItem(this.stateStorageName);\n    var refreshToken = this.isUsingRefreshToken && this.refreshTokenName != null ? localStorage.getItem(this.refreshTokenName) : null;\n    var refreshTokenTime = this.isUsingRefreshToken && this.refreshTokenTimeName != null ? localStorage.getItem(this.refreshTokenTimeName) : null;\n    return this.checkTokenExist(authToken, authTokenType, authTokenTime, stateCookie, refreshToken, refreshTokenTime);\n  };\n  /**\n   * Check if the Initial token is valid or not,\n   * Called Internally by `initialCookieToken_()` and `initialLSToken_()`\n   *\n   * If the tokens are valid,\n   * then it response TokenObject with auth Information\n   * Else it response TokenObject with all null\n   *\n   * @param authToken\n   * @param authTokenType\n   * @param authTokenTime\n   * @param stateCookie\n   * @param refreshToken\n   * @param refreshTokenTime\n   *\n   * @returns AuthKitStateInterface\n   *\n   */\n  TokenObject.prototype.checkTokenExist = function (authToken, authTokenType, authTokenTime, stateCookie, refreshToken, refreshTokenTime) {\n    if (!!authToken && !!authTokenType && !!authTokenTime && !!stateCookie) {\n      var expiresAt = new Date(authTokenTime);\n      try {\n        var authState = JSON.parse(stateCookie);\n        var obj = {\n          auth: {\n            token: authToken,\n            type: authTokenType,\n            expiresAt: expiresAt\n          },\n          userState: authState,\n          isSignIn: true,\n          isUsingRefreshToken: this.isUsingRefreshToken,\n          refresh: undefined\n        };\n        if (this.isUsingRefreshToken && !!refreshToken && !!refreshTokenTime) {\n          var refreshTokenExpiresAt = new Date(refreshTokenTime);\n          return __assign(__assign({}, obj), {\n            refresh: {\n              token: refreshToken,\n              expiresAt: refreshTokenExpiresAt\n            }\n          });\n        } else {\n          return __assign(__assign({}, obj), {\n            refresh: null\n          });\n        }\n      } catch (e) {\n        return {\n          auth: null,\n          refresh: null,\n          userState: null,\n          isUsingRefreshToken: this.isUsingRefreshToken,\n          isSignIn: false\n        };\n      }\n    } else {\n      return {\n        auth: null,\n        refresh: null,\n        userState: null,\n        isUsingRefreshToken: this.isUsingRefreshToken,\n        isSignIn: false\n      };\n    }\n  };\n  /**\n   * Sync Auth Tokens on time of login and logout\n   *\n   * Set the New Cookies or new Localstorage on login\n   * Or Remove the old Cookies or old Localstorage on logout\n   *\n   * @param authState\n   */\n  TokenObject.prototype.syncTokens = function (authState) {\n    if (authState.auth) {\n      if (this.isUsingRefreshToken && authState.refresh) {\n        this.setToken(authState.auth.token, authState.auth.type, authState.refresh.token, authState.refresh.expiresAt, authState.auth.expiresAt, authState.userState);\n      } else {\n        this.setToken(authState.auth.token, authState.auth.type, null, null, authState.auth.expiresAt, authState.userState);\n      }\n    } else {\n      this.removeToken();\n    }\n  };\n  /**\n   * Set Cookies or localstorage on login\n   *\n   * @param authToken\n   * @param authTokenType\n   * @param refreshToken\n   * @param refreshTokenExpiresAt\n   * @param expiresAt\n   * @param authState\n   */\n  TokenObject.prototype.setToken = function (authToken, authTokenType, refreshToken, refreshTokenExpiresAt, expiresAt, authState) {\n    if (this.authStorageType === 'cookie') {\n      this.setCookieToken_(authToken, authTokenType, refreshToken, expiresAt, refreshTokenExpiresAt, authState);\n    } else {\n      this.setLSToken_(authToken, authTokenType, refreshToken, expiresAt, refreshTokenExpiresAt, authState);\n    }\n  };\n  /**\n   *\n   * Set Cookie on time of Login\n   *\n   * @param authToken\n   * @param authTokenType\n   * @param refreshToken\n   * @param expiresAt\n   * @param refreshTokenExpiresAt\n   * @param authState\n   */\n  TokenObject.prototype.setCookieToken_ = function (authToken, authTokenType, refreshToken, expiresAt, refreshTokenExpiresAt, authState) {\n    Cookies.set(this.authStorageName, authToken, {\n      expires: expiresAt,\n      domain: this.cookieDomain,\n      secure: this.cookieSecure\n    });\n    Cookies.set(this.authStorageTypeName, authTokenType, {\n      expires: expiresAt,\n      domain: this.cookieDomain,\n      secure: this.cookieSecure\n    });\n    Cookies.set(this.authTimeStorageName, expiresAt.toISOString(), {\n      expires: expiresAt,\n      domain: this.cookieDomain,\n      secure: this.cookieSecure\n    });\n    if (authState) {\n      Cookies.set(this.stateStorageName, JSON.stringify(authState), {\n        expires: expiresAt,\n        domain: this.cookieDomain,\n        secure: this.cookieSecure\n      });\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenName && !!refreshToken) {\n      Cookies.set(this.refreshTokenName, refreshToken, {\n        expires: expiresAt,\n        domain: this.cookieDomain,\n        secure: this.cookieSecure\n      });\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName && !!refreshTokenExpiresAt) {\n      Cookies.set(this.refreshTokenTimeName, refreshTokenExpiresAt.toISOString(), {\n        expires: expiresAt,\n        domain: this.cookieDomain,\n        secure: this.cookieSecure\n      });\n    }\n  };\n  /**\n   * Set LocalStorage at the time of Login\n   *\n   * @param authToken\n   * @param authTokenType\n   * @param refreshToken\n   * @param expiresAt\n   * @param refreshTokenExpiresAt\n   * @param authState\n   */\n  TokenObject.prototype.setLSToken_ = function (authToken, authTokenType, refreshToken, expiresAt, refreshTokenExpiresAt, authState) {\n    localStorage.setItem(this.authStorageName, authToken);\n    localStorage.setItem(this.authStorageTypeName, authTokenType);\n    localStorage.setItem(this.authTimeStorageName, expiresAt.toISOString());\n    if (authState) {\n      localStorage.setItem(this.stateStorageName, JSON.stringify(authState));\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenName && !!refreshToken) {\n      localStorage.setItem(this.refreshTokenName, refreshToken);\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName && !!refreshTokenExpiresAt) {\n      localStorage.setItem(this.refreshTokenTimeName, refreshTokenExpiresAt.toISOString());\n    }\n  };\n  /**\n   * Remove Tokens on time of Logout\n   */\n  TokenObject.prototype.removeToken = function () {\n    if (this.authStorageType === 'cookie') {\n      this.removeCookieToken_();\n    } else {\n      this.removeLSToken_();\n    }\n  };\n  /**\n   * Remove Token from Cookies\n   */\n  TokenObject.prototype.removeCookieToken_ = function () {\n    Cookies.remove(this.authStorageName, {\n      domain: this.cookieDomain,\n      secure: this.cookieSecure\n    });\n    Cookies.remove(this.authTimeStorageName, {\n      domain: this.cookieDomain,\n      secure: this.cookieSecure\n    });\n    Cookies.remove(this.authStorageTypeName, {\n      domain: this.cookieDomain,\n      secure: this.cookieSecure\n    });\n    Cookies.remove(this.stateStorageName, {\n      domain: this.cookieDomain,\n      secure: this.cookieSecure\n    });\n    if (this.isUsingRefreshToken && !!this.refreshTokenName) {\n      Cookies.remove(this.refreshTokenName, {\n        domain: this.cookieDomain,\n        secure: this.cookieSecure\n      });\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName) {\n      Cookies.remove(this.refreshTokenTimeName, {\n        domain: this.cookieDomain,\n        secure: this.cookieSecure\n      });\n    }\n  };\n  /**\n   * Remove Token from LocalStorage\n   */\n  TokenObject.prototype.removeLSToken_ = function () {\n    localStorage.removeItem(this.authStorageName);\n    localStorage.removeItem(this.authTimeStorageName);\n    localStorage.removeItem(this.authStorageTypeName);\n    localStorage.removeItem(this.stateStorageName);\n    if (this.isUsingRefreshToken && !!this.refreshTokenName) {\n      localStorage.removeItem(this.refreshTokenName);\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName) {\n      localStorage.removeItem(this.refreshTokenTimeName);\n    }\n  };\n  return TokenObject;\n}();\nexport { TokenObject as default };","map":null,"metadata":{},"sourceType":"module"}