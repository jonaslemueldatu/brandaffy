{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst mongoose = require('mongoose');\nconst brandProfile = require('../model/affiliateProfile');\nconst jwt = require('jsonwebtoken');\nrouter.post('/', (req, res) => {\n  brandProfile.findOne({\n    email: req.body.email\n  }).then(data => {\n    if (data) {\n      if (data.password == req.body.password) {\n        const token = jwt.sign({\n          data: data\n        }, 'topulchraes', {\n          expiresIn: \"1h\"\n        });\n        data.logged_in = true;\n        data.save().then(res.status(200), res.json({\n          msg: 'User has logged-in successfully',\n          token: token,\n          user_profile: {\n            id: data._id,\n            email: data.email,\n            user_type: data.user_type\n          }\n        }));\n      } else {\n        res.status(200);\n        res.json({\n          error: \"Incorrect password!\"\n        });\n      }\n    } else {\n      res.status(200);\n      res.json({\n        error: \"Email is not registered yet!\"\n      });\n    }\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","mongoose","brandProfile","jwt","post","req","res","findOne","email","body","then","data","password","token","sign","expiresIn","logged_in","save","status","json","msg","user_profile","id","_id","user_type","error","module","exports"],"sources":["/Users/jonaslemueldatu/Desktop/Brandaffy.io/brandaffy/src/sections/Brandloginform.js"],"sourcesContent":["const express = require('express')\nconst router = express.Router()\nconst mongoose = require('mongoose')\nconst brandProfile = require('../model/affiliateProfile')\nconst jwt = require('jsonwebtoken')\n\nrouter.post('/', (req, res) => {\n   brandProfile.findOne({ email: req.body.email }).then((data) => {\n        if (data) {\n            if (data.password == req.body.password) {\n                const token = jwt.sign({ data: data }, 'topulchraes', { expiresIn: \"1h\" });\n                data.logged_in = true\n                data.save().then(\n                    res.status(200),\n                    res.json({\n                        msg: 'User has logged-in successfully',\n                        token: token,\n                        user_profile: {\n                            id: data._id,\n                            email: data.email,\n                            user_type: data.user_type\n                        }\n                    })\n                )\n            } else {\n                res.status(200)\n                res.json({\n                    error: \"Incorrect password!\"\n                })\n            }\n        } else {\n            res.status(200)\n            res.json({\n                error: \"Email is not registered yet!\"\n            })\n        }\n    })\n})\n\nmodule.exports = router;"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,QAAQ,GAAGH,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMI,YAAY,GAAGJ,OAAO,CAAC,2BAA2B,CAAC;AACzD,MAAMK,GAAG,GAAGL,OAAO,CAAC,cAAc,CAAC;AAEnCC,MAAM,CAACK,IAAI,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC5BJ,YAAY,CAACK,OAAO,CAAC;IAAEC,KAAK,EAAEH,GAAG,CAACI,IAAI,CAACD;EAAM,CAAC,CAAC,CAACE,IAAI,CAAEC,IAAI,IAAK;IAC1D,IAAIA,IAAI,EAAE;MACN,IAAIA,IAAI,CAACC,QAAQ,IAAIP,GAAG,CAACI,IAAI,CAACG,QAAQ,EAAE;QACpC,MAAMC,KAAK,GAAGV,GAAG,CAACW,IAAI,CAAC;UAAEH,IAAI,EAAEA;QAAK,CAAC,EAAE,aAAa,EAAE;UAAEI,SAAS,EAAE;QAAK,CAAC,CAAC;QAC1EJ,IAAI,CAACK,SAAS,GAAG,IAAI;QACrBL,IAAI,CAACM,IAAI,CAAC,CAAC,CAACP,IAAI,CACZJ,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,EACfZ,GAAG,CAACa,IAAI,CAAC;UACLC,GAAG,EAAE,iCAAiC;UACtCP,KAAK,EAAEA,KAAK;UACZQ,YAAY,EAAE;YACVC,EAAE,EAAEX,IAAI,CAACY,GAAG;YACZf,KAAK,EAAEG,IAAI,CAACH,KAAK;YACjBgB,SAAS,EAAEb,IAAI,CAACa;UACpB;QACJ,CAAC,CACL,CAAC;MACL,CAAC,MAAM;QACHlB,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC;QACfZ,GAAG,CAACa,IAAI,CAAC;UACLM,KAAK,EAAE;QACX,CAAC,CAAC;MACN;IACJ,CAAC,MAAM;MACHnB,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC;MACfZ,GAAG,CAACa,IAAI,CAAC;QACLM,KAAK,EAAE;MACX,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;AACN,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAG5B,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}