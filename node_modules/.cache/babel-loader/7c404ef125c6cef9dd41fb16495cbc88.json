{"ast":null,"code":"import * as React from 'react';\nimport AuthContext from './AuthContext.js';\nimport TokenObject from './TokenObject.js';\nimport { authReducer, doRefresh } from './utils/reducers.js';\nimport { useInterval } from './utils/hooks.js';\nimport { AuthKitError } from './errors.js';\n\n/**\n * AuthProvider - The Authentication Context Provider\n *\n * @param children\n * @param authStorageName\n * @param cookieDomain\n * @param cookieSecure\n *\n * @return Functional Component\n */\nvar AuthProvider = function AuthProvider(_a) {\n  var children = _a.children,\n    authType = _a.authType,\n    authName = _a.authName,\n    cookieDomain = _a.cookieDomain,\n    cookieSecure = _a.cookieSecure,\n    refresh = _a.refresh;\n  if (authType === 'cookie') {\n    if (!cookieDomain) {\n      throw new AuthKitError('authType \\'cookie\\' ' + 'requires \\'cookieDomain\\' and \\'cookieSecure\\' ' + 'props in AuthProvider');\n    }\n  }\n  var refreshTokenName = refresh ? \"\".concat(authName, \"_refresh\") : null;\n  var tokenObject = new TokenObject(authName, authType, refreshTokenName, cookieDomain, cookieSecure);\n  var _b = React.useReducer(authReducer, tokenObject.initialToken()),\n    authState = _b[0],\n    dispatch = _b[1];\n  if (refresh) {\n    useInterval(function () {\n      var _a, _b, _c, _d;\n      refresh.refreshApiCallback({\n        authToken: (_a = authState.auth) === null || _a === void 0 ? void 0 : _a.token,\n        authTokenExpireAt: (_b = authState.auth) === null || _b === void 0 ? void 0 : _b.expiresAt,\n        authUserState: authState.userState,\n        refreshToken: (_c = authState.refresh) === null || _c === void 0 ? void 0 : _c.token,\n        refreshTokenExpiresAt: (_d = authState.refresh) === null || _d === void 0 ? void 0 : _d.expiresAt\n      }).then(function (result) {\n        // IF the API call is successful then refresh the AUTH state\n        if (result.isSuccess) {\n          // store the new value using the state update\n          dispatch(doRefresh(result));\n        }\n      }).catch(function () {\n        // do something in future\n      });\n    }, authState.isSignIn ? refresh.interval : null);\n  }\n  React.useEffect(function () {\n    tokenObject.syncTokens(authState);\n  }, [authState]);\n  return React.createElement(AuthContext.Provider, {\n    value: {\n      authState: authState,\n      dispatch: dispatch\n    }\n  }, children);\n};\nexport { AuthProvider as default };","map":null,"metadata":{},"sourceType":"module"}