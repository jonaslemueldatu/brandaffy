{"ast":null,"code":"import { tokensToRems } from './utilities.mjs';\nimport { breakpoints } from './token-groups/breakpoints.mjs';\nimport { border } from './token-groups/border.mjs';\nimport { depth } from './token-groups/depth.mjs';\nimport { font } from './token-groups/font.mjs';\nimport { legacy } from './token-groups/legacy.mjs';\nimport { color } from './token-groups/color.mjs';\nimport { colors } from './token-groups/colors.mjs';\nimport { motion } from './token-groups/motion.mjs';\nimport { shadow } from './token-groups/shadow.mjs';\nimport { shape } from './token-groups/shape.mjs';\nimport { spacing } from './token-groups/spacing.mjs';\nimport { space } from './token-groups/space.mjs';\nimport { zIndex } from './token-groups/zIndex.mjs';\nvar metadata = createMetadata({\n  breakpoints: tokensToRems(breakpoints),\n  border: tokensToRems(border),\n  color: color,\n  colors: colors,\n  depth: depth,\n  font: tokensToRems(font),\n  legacy: tokensToRems(legacy),\n  motion: motion,\n  shadow: tokensToRems(shadow),\n  shape: tokensToRems(shape),\n  spacing: tokensToRems(spacing),\n  space: tokensToRems(space),\n  zIndex: zIndex\n});\n\n/**\n * Identity function that simply returns the provided tokens with metadata, but additionally\n * validates the input matches the `Metadata` type exactly and infers all members.\n */\nfunction createMetadata(metadata) {\n  return metadata;\n}\nexport { createMetadata, metadata };","map":{"version":3,"names":["tokensToRems","breakpoints","border","depth","font","legacy","color","colors","motion","shadow","shape","spacing","space","zIndex","metadata","createMetadata"],"sources":["/Users/jonaslemueldatu/node_modules/@shopify/polaris-tokens/dist/esm/src/metadata.mjs"],"sourcesContent":["import { tokensToRems } from './utilities.mjs';\nimport { breakpoints } from './token-groups/breakpoints.mjs';\nimport { border } from './token-groups/border.mjs';\nimport { depth } from './token-groups/depth.mjs';\nimport { font } from './token-groups/font.mjs';\nimport { legacy } from './token-groups/legacy.mjs';\nimport { color } from './token-groups/color.mjs';\nimport { colors } from './token-groups/colors.mjs';\nimport { motion } from './token-groups/motion.mjs';\nimport { shadow } from './token-groups/shadow.mjs';\nimport { shape } from './token-groups/shape.mjs';\nimport { spacing } from './token-groups/spacing.mjs';\nimport { space } from './token-groups/space.mjs';\nimport { zIndex } from './token-groups/zIndex.mjs';\n\nvar metadata = createMetadata({\n  breakpoints: tokensToRems(breakpoints),\n  border: tokensToRems(border),\n  color: color,\n  colors: colors,\n  depth: depth,\n  font: tokensToRems(font),\n  legacy: tokensToRems(legacy),\n  motion: motion,\n  shadow: tokensToRems(shadow),\n  shape: tokensToRems(shape),\n  spacing: tokensToRems(spacing),\n  space: tokensToRems(space),\n  zIndex: zIndex\n});\n\n/**\n * Identity function that simply returns the provided tokens with metadata, but additionally\n * validates the input matches the `Metadata` type exactly and infers all members.\n */\nfunction createMetadata(metadata) {\n  return metadata;\n}\n\nexport { createMetadata, metadata };\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,WAAW,QAAQ,gCAAgC;AAC5D,SAASC,MAAM,QAAQ,2BAA2B;AAClD,SAASC,KAAK,QAAQ,0BAA0B;AAChD,SAASC,IAAI,QAAQ,yBAAyB;AAC9C,SAASC,MAAM,QAAQ,2BAA2B;AAClD,SAASC,KAAK,QAAQ,0BAA0B;AAChD,SAASC,MAAM,QAAQ,2BAA2B;AAClD,SAASC,MAAM,QAAQ,2BAA2B;AAClD,SAASC,MAAM,QAAQ,2BAA2B;AAClD,SAASC,KAAK,QAAQ,0BAA0B;AAChD,SAASC,OAAO,QAAQ,4BAA4B;AACpD,SAASC,KAAK,QAAQ,0BAA0B;AAChD,SAASC,MAAM,QAAQ,2BAA2B;AAElD,IAAIC,QAAQ,GAAGC,cAAc,CAAC;EAC5Bd,WAAW,EAAED,YAAY,CAACC,WAAW,CAAC;EACtCC,MAAM,EAAEF,YAAY,CAACE,MAAM,CAAC;EAC5BI,KAAK,EAAEA,KAAK;EACZC,MAAM,EAAEA,MAAM;EACdJ,KAAK,EAAEA,KAAK;EACZC,IAAI,EAAEJ,YAAY,CAACI,IAAI,CAAC;EACxBC,MAAM,EAAEL,YAAY,CAACK,MAAM,CAAC;EAC5BG,MAAM,EAAEA,MAAM;EACdC,MAAM,EAAET,YAAY,CAACS,MAAM,CAAC;EAC5BC,KAAK,EAAEV,YAAY,CAACU,KAAK,CAAC;EAC1BC,OAAO,EAAEX,YAAY,CAACW,OAAO,CAAC;EAC9BC,KAAK,EAAEZ,YAAY,CAACY,KAAK,CAAC;EAC1BC,MAAM,EAAEA;AACV,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,SAASE,cAAcA,CAACD,QAAQ,EAAE;EAChC,OAAOA,QAAQ;AACjB;AAEA,SAASC,cAAc,EAAED,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}